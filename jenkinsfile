pipeline {
    agent { label 'slave01' }

    environment {
        IMAGE_NAME           = "hubdc.dso.local/gungun/python-prisma:20250604"
        CX_TOKEN             = credentials('cx_token')
        PRISMA_CONSOLE_URL   = "https://asia-southeast1.cloud.twistlock.com/aws-singapore-961149791"
        PRISMA_ACCESS_ID     = credentials('prisma-access-id')
        PRISMA_ACCESS_SECRET = credentials('prisma_access_secret')
        GITLAB_PYTHON_REPO   = "git@192.168.172.13:netsiri_r/gitlab-golden-img.git"
        PYTHON_SCRIPT        = "cxone_end_to_end.py"
        PYTHON_DIR           = "python-scripts"
    }

    stages {
        stage('Checkout GitHub Code') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${IMAGE_NAME} ."
            }
        }

        stage('Scan image with Prisma') {
            steps {
                script {
                    def command = """
                    twistcli images scan --address ${PRISMA_CONSOLE_URL} \\
                    -u ${PRISMA_ACCESS_ID} \\
                    -p ${PRISMA_ACCESS_SECRET} \\
                    --details ${IMAGE_NAME}
                    """
                    sh command
                }
            }
        }

        stage('Fetch Python Script via git archive') {
            steps {
                script {

                        sh """
                          # สร้างโฟลเดอร์สำหรับสคริปต์ ถ้ายังไม่มี
                          mkdir -p ${PYTHON_DIR}

                          cd ${PYTHON_DIR}
                          git archive --remote=${GITLAB_PYTHON_REPO} HEAD ${PYTHON_SCRIPT} | tar -x

                        """

                }
            }
        }

        stage('Fix Permissions on Workspace') {
            steps {
                sh 'chmod -R o+rwx "$WORKSPACE"'
            }
        }

        stage('Run Python Script via docker run') {
            steps {
                script {
                    sh """
                    docker run --rm \\
                    -v "\$WORKSPACE":/app:Z \\
                    -w /app \\
                    ${IMAGE_NAME} \\
                    python3 ${PYTHON_DIR}/${PYTHON_SCRIPT} \\
                        --project-name "MFEC_end_to_end_scan" \\
                        --tenant "nfr_westconth" \\
                        --token "${CX_TOKEN}" \\
                        --region "anz" \\
                        --scan-id "e3d1cb0e-440e-4f15-aace-4167b9be8232"
                    """
                }
            }
        }
    }

    post {
        always {
            deleteDir()
        }
    }
}
